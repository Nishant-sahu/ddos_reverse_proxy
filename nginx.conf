user nobody;
worker_processes auto;

error_log /var/log/nginx/error.log debug;
pid /tmp/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include /usr/local/openresty/nginx/conf/mime.types;
    default_type application/octet-stream;

    log_format main_ext '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for" '
                        'upstream_addr: $upstream_addr '
                        'upstream_status: $upstream_status '
                        'request_time: $request_time '
                        'upstream_response_time: $upstream_response_time '
                        'upstream_connect_time: $upstream_connect_time '
                        'upstream_header_time: $upstream_header_time';

    access_log /var/log/nginx/access.log main_ext;

    sendfile on;
    keepalive_timeout 65;

    # Add resolver directive here
    resolver 8.8.8.8 8.8.4.4 valid=30s ipv6=off;

    # Cloudflare IP ranges
    set_real_ip_from 103.21.244.0/22;
    set_real_ip_from 103.22.200.0/22;
    set_real_ip_from 103.31.4.0/22;
    set_real_ip_from 104.16.0.0/13;
    set_real_ip_from 104.24.0.0/14;
    set_real_ip_from 108.162.192.0/18;
    set_real_ip_from 131.0.72.0/22;
    set_real_ip_from 141.101.64.0/18;
    set_real_ip_from 162.158.0.0/15;
    set_real_ip_from 172.64.0.0/13;
    set_real_ip_from 173.245.48.0/20;
    set_real_ip_from 188.114.96.0/20;
    set_real_ip_from 190.93.240.0/20;
    set_real_ip_from 197.234.240.0/22;
    set_real_ip_from 198.41.128.0/17;
    set_real_ip_from 2400:cb00::/32;
    set_real_ip_from 2606:4700::/32;
    set_real_ip_from 2803:f800::/32;
    set_real_ip_from 2405:b500::/32;
    set_real_ip_from 2405:8100::/32;
    set_real_ip_from 2c0f:f248::/32;
    set_real_ip_from 2a06:98c0::/29;

    real_ip_header CF-Connecting-IP;
    real_ip_recursive on;

    # Lua shared dictionary for caching the whitelist
    lua_shared_dict whitelist_cache 10m;

    init_by_lua_block {
        local cjson = require "cjson"
        local http = require "resty.http"
        
        function load_whitelist()
            ngx.log(ngx.INFO, "Starting whitelist fetch")
            local httpc = http.new()
            httpc:set_timeout(10000)  -- 10 second timeout

            -- Bypass SSL verification
            httpc:set_proxy_options({
                verify = false,
                sni_host = "allowed-ips-fps.n-project.workers.dev"
            })

            local res, err = httpc:request_uri("https://allowed-ips-fps.n-project.workers.dev/", {
                method = "GET",
                headers = {
                    ["User-Agent"] = "Nginx/Lua Whitelist Fetcher"
                },
                ssl_verify = false
            })

            if not res then
                ngx.log(ngx.ERR, "Failed to fetch whitelist: ", err)
                return nil, err
            end

            ngx.log(ngx.INFO, "Whitelist fetch status: ", res.status)
            ngx.log(ngx.INFO, "Whitelist response body: ", res.body)

            if res.status ~= 200 then
                ngx.log(ngx.ERR, "Failed to fetch whitelist, status: ", res.status)
                return nil, "HTTP status " .. res.status
            end

            local ok, data = pcall(cjson.decode, res.body)
            if not ok then
                ngx.log(ngx.ERR, "Failed to parse whitelist JSON: ", data)
                return nil, "JSON parse error"
            end

            local whitelist = data.whitelisted_ips or {}
            ngx.log(ngx.INFO, "Parsed whitelist: ", cjson.encode(whitelist))
            
            return whitelist
        end

        -- Fallback whitelist
        local fallback_whitelist = {
            ["13.201.151.73"] = 1,
            ["35.240.181.85"] = 1,
            ["43.204.180.85"] = 1,
            ["116.203.134.67"] = 1,
            ["116.203.129.16"] = 1,
            ["23.88.105.37"] = 1,
            ["128.140.8.200"] = 1,
            ["223.236.180.7"] = 1
        }

        function get_whitelist()
            local whitelist_cache = ngx.shared.whitelist_cache
            local whitelist_json = whitelist_cache:get("whitelist")
            
            if whitelist_json then
                local ok, whitelist = pcall(cjson.decode, whitelist_json)
                if ok then
                    return whitelist
                end
            end
            
            -- If we couldn't get a valid whitelist from cache, try to fetch it
            local whitelist, err = load_whitelist()
            if whitelist then
                whitelist_cache:set("whitelist", cjson.encode(whitelist), 3600)  -- Cache for 1 hour
                return whitelist
            end
            
            -- If we still don't have a valid whitelist, use the fallback
            ngx.log(ngx.WARN, "Using fallback whitelist")
            return fallback_whitelist
        end

        function get_client_ip()
            local headers = ngx.req.get_headers()
            local cf_connecting_ip = headers["CF-Connecting-IP"]
            if cf_connecting_ip then
                return cf_connecting_ip
            end
            local x_forwarded_for = headers["X-Forwarded-For"]
            if x_forwarded_for then
                local ips = ngx.re.split(x_forwarded_for, ",")
                return ips[1]
            end
            return ngx.var.remote_addr
        end
    }

    init_worker_by_lua_block {
        local whitelist_cache = ngx.shared.whitelist_cache
        local cjson = require "cjson"

        local function update_whitelist()
            ngx.log(ngx.INFO, "Updating whitelist")
            local new_whitelist, err = load_whitelist()
            if not new_whitelist then
                ngx.log(ngx.ERR, "Failed to load whitelist: ", err)
                return
            end
            local success, err, forcible = whitelist_cache:set("whitelist", cjson.encode(new_whitelist), 3600)  -- Cache for 1 hour
            if not success then
                ngx.log(ngx.ERR, "Failed to set whitelist in cache: ", err)
            else
                ngx.log(ngx.INFO, "Whitelist updated in cache")
            end
        end

        local ok, err = ngx.timer.every(3600, update_whitelist)  -- Update every hour
        if not ok then
            ngx.log(ngx.ERR, "Failed to create timer: ", err)
        else
            ngx.log(ngx.INFO, "Whitelist update timer created successfully")
        end

        -- Initial whitelist load
        update_whitelist()
    }

    # Backend definition
    upstream backend {
        server 13.201.151.73:80;
    }

    # Shared location blocks
    lua_shared_dict limit_req_store 10m;
    limit_req_zone $binary_remote_addr zone=one:10m rate=1r/s;

    # HTTP server block
    server {
        listen 80;
        listen [::]:80;
        server_name _;

        # Redirect all HTTP traffic to HTTPS
        location / {
            return 301 https://$host$request_uri;
        }
    }

    # HTTPS server block
    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name _;

        ssl_certificate /etc/nginx/ssl/nginx.crt;
        ssl_certificate_key /etc/nginx/ssl/nginx.key;

        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_prefer_server_ciphers off;

        location / {
            access_by_lua_block {
                local whitelist = get_whitelist()
                local client_ip = get_client_ip()
                ngx.log(ngx.INFO, "Checking IP: ", client_ip, " against whitelist")

                if whitelist[client_ip] ~= 1 then
                    ngx.log(ngx.INFO, "IP not whitelisted, applying additional checks")
                    local wait = require "wait"
                    local captcha = require "captcha"
                    
                    wait.check()
                    if not captcha.check() then
                        ngx.log(ngx.INFO, "Captcha check failed, exiting")
                        ngx.exit(ngx.HTTP_OK)
                    end
                else
                    ngx.log(ngx.INFO, "IP is whitelisted, skipping additional checks")
                end
            }

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_intercept_errors on;
            error_page 502 503 504 = @fallback;

            proxy_pass http://backend;
        }

        location @fallback {
            return 503 "The server is temporarily unavailable. Please try again later.";
        }

        # Debugging locations
        location /myip {
            default_type text/plain;
            content_by_lua_block {
                local whitelist = get_whitelist()
                local client_ip = get_client_ip()
                local is_whitelisted = whitelist[client_ip] == 1 and "Yes" or "No"

                ngx.say("Your IP: ", client_ip)
                ngx.say("Whitelisted: ", is_whitelisted)
            }
        }

        location /debug {
            add_header Content-Type text/plain;
            content_by_lua_block {
                local whitelist = get_whitelist()
                local client_ip = get_client_ip()

                ngx.say("Client IP: ", client_ip)
                ngx.say("Remote Address: ", ngx.var.remote_addr)
                ngx.say("X-Forwarded-For: ", ngx.var.http_x_forwarded_for)
                ngx.say("CF-Connecting-IP: ", ngx.var.http_cf_connecting_ip)
                ngx.say("Host: ", ngx.var.host)
                ngx.say("Request URI: ", ngx.var.request_uri)
                ngx.say("Whitelisted: ", whitelist[client_ip] == 1 and "Yes" or "No")
            }
        }

        location /whitelist_debug {
            default_type text/plain;
            content_by_lua_block {
                local cjson = require "cjson"
                local whitelist_cache = ngx.shared.whitelist_cache
                local whitelist = get_whitelist()
                local client_ip = get_client_ip()

                if whitelist[client_ip] ~= 1 then
                    ngx.status = ngx.HTTP_FORBIDDEN
                    ngx.say("Access denied.")
                    return ngx.exit(ngx.HTTP_FORBIDDEN)
                end

                ngx.say("Debugging Whitelist Fetch and Cache\n")

                -- Attempt to fetch the whitelist
                ngx.say("Fetching whitelist...")
                local new_whitelist, err = load_whitelist()
                if not new_whitelist then
                    ngx.say("Error fetching whitelist: ", err)
                else
                    ngx.say("Whitelist fetched successfully")
                    ngx.say("Fetched whitelist content:")
                    ngx.say(cjson.encode(new_whitelist))
                end

                ngx.say("\nChecking cache...")
                local cached_whitelist = whitelist_cache:get("whitelist")
                if not cached_whitelist then
                    ngx.say("No whitelist found in cache")
                else
                    ngx.say("Cached whitelist content:")
                    ngx.say(cached_whitelist)
                end

                ngx.say("\nAttempting to update cache...")
                if new_whitelist then
                    local success, err, forcible = whitelist_cache:set("whitelist", cjson.encode(new_whitelist), 3600)
                    if success then
                        ngx.say("Cache updated successfully")
                    else
                        ngx.say("Failed to update cache: ", err)
                    end
                else
                    ngx.say("Skipped cache update due to fetch failure")
                end

                ngx.say("\nFinal cache check...")
                cached_whitelist = whitelist_cache:get("whitelist")
                if not cached_whitelist then
                    ngx.say("No whitelist found in cache after update attempt")
                else
                    ngx.say("Final cached whitelist content:")
                    ngx.say(cached_whitelist)
                end

                ngx.say("\nCurrent active whitelist:")
                ngx.say(cjson.encode(whitelist))
            }
        }

        location /invalidate_cache {
            default_type text/plain;
            content_by_lua_block {
                local whitelist = get_whitelist()
                local client_ip = get_client_ip()

                if whitelist[client_ip] ~= 1 then
                    ngx.status = ngx.HTTP_FORBIDDEN
                    ngx.say("Access denied.")
                    return ngx.exit(ngx.HTTP_FORBIDDEN)
                end

                local whitelist_cache = ngx.shared.whitelist_cache
                whitelist_cache:delete("whitelist")
                
                ngx.say("Whitelist cache invalidated successfully.")
                ngx.say("The whitelist will be fetched and cached again on the next request.")
            }
        }
    }
}