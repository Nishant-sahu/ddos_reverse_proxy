user nobody;
worker_processes auto;

error_log /var/log/nginx/error.log debug;
pid /tmp/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include /usr/local/openresty/nginx/conf/mime.types;
    default_type application/octet-stream;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'upstream_addr: $upstream_addr '
                    'upstream_status: $upstream_status '
                    'request_time: $request_time';

    access_log /var/log/nginx/access.log main;

    sendfile on;
    keepalive_timeout 65;

    # Cloudflare IP ranges
    set_real_ip_from 103.21.244.0/22;
    set_real_ip_from 103.22.200.0/22;
    set_real_ip_from 103.31.4.0/22;
    set_real_ip_from 104.16.0.0/13;
    set_real_ip_from 104.24.0.0/14;
    set_real_ip_from 108.162.192.0/18;
    set_real_ip_from 131.0.72.0/22;
    set_real_ip_from 141.101.64.0/18;
    set_real_ip_from 162.158.0.0/15;
    set_real_ip_from 172.64.0.0/13;
    set_real_ip_from 173.245.48.0/20;
    set_real_ip_from 188.114.96.0/20;
    set_real_ip_from 190.93.240.0/20;
    set_real_ip_from 197.234.240.0/22;
    set_real_ip_from 198.41.128.0/17;
    set_real_ip_from 2400:cb00::/32;
    set_real_ip_from 2606:4700::/32;
    set_real_ip_from 2803:f800::/32;
    set_real_ip_from 2405:b500::/32;
    set_real_ip_from 2405:8100::/32;
    set_real_ip_from 2c0f:f248::/32;
    set_real_ip_from 2a06:98c0::/29;

    real_ip_header CF-Connecting-IP;
    real_ip_recursive on;

    # Define the whitelist
    geo $whitelist {
        default 0;
        13.201.151.73 1;  # prod instance
        35.240.181.85 1;  # worker
        43.204.180.85 1;  # cron-jobs.org
        116.203.134.67 1; # cron-jobs.org
        116.203.129.16 1; # cron-jobs.org
        23.88.105.37 1;   # cron-jobs.org
        128.140.8.200 1;  # cron-jobs.org
        223.235.78.245 1;
        # Add your IP here, for example:
        # 203.0.113.1 1;
    }

    # Backend definition
    upstream backend {
        server 13.201.151.73:80;
    }

    # Common configuration for both HTTP and HTTPS
    map $whitelist $do_not_cache {
        0 1;
        1 0;
    }

    # Shared location block
    geo $limit {
        default 1;
        13.201.151.73 0;
        35.240.181.85 0;
    }

    map $limit $limit_key {
        0 "";
        1 $binary_remote_addr;
    }

    limit_req_zone $limit_key zone=one:10m rate=1r/s;

    # HTTP server block
    server {
        listen 80;
        listen [::]:80;
        server_name _;

        location / {
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            access_by_lua_block {
                if ngx.var.do_not_cache == "1" then
                    local wait = require "wait"
                    local captcha = require "captcha"
                    
                    wait.check()
                    if not captcha.check() then
                        ngx.exit(ngx.HTTP_OK)
                    end
                end
            }

            proxy_pass http://backend;
        }

        # Debugging locations
        location /myip {
            default_type text/plain;
            return 200 "Your IP: $remote_addr\nWhitelisted: $whitelist\n";
        }

        location /debug {
            add_header Content-Type text/plain;
            return 200 "Remote Address: $remote_addr\nX-Forwarded-For: $http_x_forwarded_for\nHost: $host\nRequest URI: $request_uri\nWhitelisted: $whitelist\n";
        }
    }

    # HTTPS server block
    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name _;

        ssl_certificate /etc/nginx/ssl/nginx.crt;
        ssl_certificate_key /etc/nginx/ssl/nginx.key;

        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_prefer_server_ciphers off;

        location / {
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            access_by_lua_block {
                if ngx.var.do_not_cache == "1" then
                    local wait = require "wait"
                    local captcha = require "captcha"
                    
                    wait.check()
                    if not captcha.check() then
                        ngx.exit(ngx.HTTP_OK)
                    end
                end
            }

            proxy_pass http://backend;
        }

        # Debugging locations
        location /myip {
            default_type text/plain;
            return 200 "Your IP: $remote_addr\nWhitelisted: $whitelist\n";
        }

        location /debug {
            add_header Content-Type text/plain;
            return 200 "Remote Address: $remote_addr\nX-Forwarded-For: $http_x_forwarded_for\nHost: $host\nRequest URI: $request_uri\nWhitelisted: $whitelist\n";
        }
    }
}